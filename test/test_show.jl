@testitem "Base show methods" begin
    @op A; @op B;
    @superop S;
    @bra b‚ÇÅ; @bra b‚ÇÇ;
    @ket k‚ÇÅ; @ket k‚ÇÇ;

    @testset "symbolic literal objects" begin
        @test repr(k‚ÇÅ) == "|k‚ÇÅ‚ü©"
        @test repr(b‚ÇÅ) == "‚ü®b‚ÇÅ|"
        @test repr(A) == "A"
        @test repr(S) == "S"
        @test repr(zero(k‚ÇÅ)) == repr(zero(b‚ÇÅ)) == repr(zero(A)) == repr(zero(S)) == "ùüé"
    end

    @testset "symbolic addition" begin
        @test repr(k‚ÇÅ + k‚ÇÇ) == "|k‚ÇÅ‚ü©+|k‚ÇÇ‚ü©"
        @test repr(b‚ÇÅ + b‚ÇÇ) == "‚ü®b‚ÇÅ|+‚ü®b‚ÇÇ|"
        @test repr(A + B) == "A+B"
    end
    
    @testset "symbolic application products" begin
        @test repr(A * k‚ÇÅ) == "A|k‚ÇÅ‚ü©"
        @test repr(b‚ÇÅ * A) == "‚ü®b‚ÇÅ|A"
        @test repr((A + B) * k‚ÇÅ) == "(A+B)|k‚ÇÅ‚ü©"
        @test repr(b‚ÇÅ * (A + B)) == "‚ü®b‚ÇÅ|(A+B)"
        @test repr((A + B) * (k‚ÇÅ + k‚ÇÇ)) == "(A+B)(|k‚ÇÅ‚ü©+|k‚ÇÇ‚ü©)"
        @test repr((b‚ÇÅ + b‚ÇÇ) * (A + B)) == "(‚ü®b‚ÇÅ|+‚ü®b‚ÇÇ|)(A+B)"
        @test repr((A ‚äó B) * SKet(:k, SpinBasis(1//2)^2)) == "(A‚äóB)|k‚ü©"
        @test repr(SBra(:b, SpinBasis(1//2)^2) * (A ‚äó B)) == "‚ü®b|(A‚äóB)"
        @test repr((A ‚äó B) * (k‚ÇÅ ‚äó k‚ÇÇ)) == "(A‚äóB)|k‚ÇÅ‚ü©|k‚ÇÇ‚ü©"
        @test repr((b‚ÇÅ ‚äó b‚ÇÇ) * (A ‚äó B)) == "‚ü®b‚ÇÅ|‚ü®b‚ÇÇ|(A‚äóB)"
    end

    @testset "symbolic scaling" begin
        @test repr(2 * k‚ÇÅ) == "2|k‚ÇÅ‚ü©"
        @test repr(2 * b‚ÇÅ) == "2‚ü®b‚ÇÅ|"
        @test repr(2 * A) == "2A"
        @test repr(2 * (k‚ÇÅ + k‚ÇÇ)) == "2(|k‚ÇÅ‚ü©+|k‚ÇÇ‚ü©)"
        @test repr(2 * (b‚ÇÅ + b‚ÇÇ)) == "2(‚ü®b‚ÇÅ|+‚ü®b‚ÇÇ|)"
        @test repr(2 * (A + B)) == "2(A+B)"
        @test repr(2 * (k‚ÇÅ ‚äó k‚ÇÇ)) == "2|k‚ÇÅ‚ü©|k‚ÇÇ‚ü©"
        @test repr(2 * (b‚ÇÅ ‚äó b‚ÇÇ)) == "2‚ü®b‚ÇÅ|‚ü®b‚ÇÇ|"
        @test repr(2 * (A ‚äó B)) == "2A‚äóB"
        @test repr((1 + im) * k‚ÇÅ) == "(1 + 1im)|k‚ÇÅ‚ü©"
        @test repr((1 + im) * b‚ÇÅ) == "(1 + 1im)‚ü®b‚ÇÅ|"
        @test repr((1 + im) * A) == "(1 + 1im)A"
        @test repr((1 + im) * (k‚ÇÅ + k‚ÇÇ)) == "(1 + 1im)(|k‚ÇÅ‚ü©+|k‚ÇÇ‚ü©)"
        @test repr((1 + im) * (b‚ÇÅ + b‚ÇÇ)) == "(1 + 1im)(‚ü®b‚ÇÅ|+‚ü®b‚ÇÇ|)"
        @test repr((1 + im) * (A + B)) == "(1 + 1im)(A+B)"
        @test repr((1 + im) * (k‚ÇÅ ‚äó k‚ÇÇ)) == "(1 + 1im)|k‚ÇÅ‚ü©|k‚ÇÇ‚ü©"
        @test repr((1 + im) * (b‚ÇÅ ‚äó b‚ÇÇ)) == "(1 + 1im)‚ü®b‚ÇÅ|‚ü®b‚ÇÇ|"
        @test repr((1 + im) * (A ‚äó B)) == "(1 + 1im)A‚äóB"
    end
    
    @testset "symbolic inner and outer products" begin
        @test repr(b‚ÇÅ * k‚ÇÅ) == "‚ü®b‚ÇÅ||k‚ÇÅ‚ü©"
        @test repr(k‚ÇÅ * b‚ÇÅ) == "|k‚ÇÅ‚ü©‚ü®b‚ÇÅ|"
    end

    @testset "symbolic superoperators" begin
        @test repr(S * A) == "S[A]"
    end

    @testset "symbolic commutator and anticommutator" begin
        @test repr(commutator(A, B)) == "[A,B]"
        @test repr(anticommutator(A, B)) == "{A,B}"
    end

    @testset "symbolic linear algebra operations" begin
        @test repr(conj(k‚ÇÅ)) == "|k‚ÇÅ‚ü©À£"
        @test repr(conj(b‚ÇÅ)) == "‚ü®b‚ÇÅ|À£"
        @test repr(conj(A)) == "AÀ£"
        @test repr(projector(k‚ÇÅ)) == "ùêè[|k‚ÇÅ‚ü©]"
        @test repr(transpose(k‚ÇÅ)) == "|k‚ÇÅ‚ü©·µÄ"
        @test repr(transpose(b‚ÇÅ)) == "‚ü®b‚ÇÅ|·µÄ"
        @test repr(transpose(A)) == "A·µÄ"
        @test repr(dagger(k‚ÇÅ)) == "|k‚ÇÅ‚ü©‚Ä†"
        @test repr(dagger(b‚ÇÅ)) == "‚ü®b‚ÇÅ|‚Ä†"
        @test repr(dagger(A)) == "A‚Ä†"
        @test repr(tr(A)) == "tr(A)"
        @test repr(ptrace(A ‚äó B, 1)) == "(tr(A))B"
        @test repr(ptrace(SOperator(:A, SpinBasis(1//2)^2), 1)) == "tr1(A)"
        @test repr(inv(A)) == "A‚Åª¬π"
        @test repr(exp(A)) == "exp(A)"
        @test repr(vec(A)) == "|A‚ü©‚ü©"
    end
end